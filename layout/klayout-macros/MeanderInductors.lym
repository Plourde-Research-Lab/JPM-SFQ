<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>import pya


class MeanderInductor(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(MeanderInductor, self).__init__()
    self.param("Label", self.TypeString, "Label", default='L1')
    self.param("Lp", self.TypeDouble, "Inductance (pscan units)", default=1.5)
    self.param("Iu", self.TypeDouble, "PSCAN Scalar (uA)", default=5.0)
    self.param("usepscan", self.TypeBoolean, "Use pscan val", default=True)
    self.param("L", self.TypeDouble, "Expected Inductance (pH)", default=50.0)
    self.param("lyr", self.TypeLayer, "Metal Layer", default=pya.LayerInfo(6,0), hidden=False)
    self.param("dx", self.TypeDouble, "X-size of inductor (um)", default=20.0)
    self.param("dy", self.TypeDouble, "Max Y-size of inductor (um)", default=20.0)
    
    self.param("w", self.TypeDouble, "Inductor Width (um)", default=1.0)
    self.param("s", self.TypeDouble, "Inductor Gap (um)", default=1.0)
    self.param("Ll", self.TypeDouble, "Inductance/length at 1um width (pH/um)", default=0.73)
    
    self.param("l", self.TypeDouble, "Inductor Length (um)", readonly=True)    
    self.param("n", self.TypeInt, "Number of Meanders", readonly=True)
    self.param("h", self.TypeDouble, "Height of Meanders (um)", readonly=True)
    

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "{}={:.3f}pH".format(self.Label, self.L)
  
  def coerce_parameters_impl(self):
    
    
    if self.usepscan:
      Lu = phi0/(2 * pi) / (self.Iu * 1e-6) # Find current scalar
      self.L = self.Lp * Lu * 1e12              # Convert to pH
      
    self.l = self.L/self.Ll
    
    h = 2*self.dy
    dx = self.dx
    
    ylen = self.l - dx
    
    n = 0
    
    while (h &gt; self.dy):
      n += 1
      h = ylen/(2*n)
      
    self.n = n
    self.h = h
    
  def produce_impl(self):
    # TODO: produce the cell content 
    # i.e. self.cell().shapes(self.l_layer).insert(pya.Polygon(...))
    
    dbu = self.layout.dbu
    
    pts = []
    
    ## First half of inductor
    xl = -self.dx/2
    pts.append(pya.Point.new(xl/dbu, 0))
    
    x0 = -self.n/2 * (self.s + self.w)
    
    pts.append(pya.Point.new(x0/dbu, 0))
    
    for i in range(self.n):
      x1 = x0 + i*(self.w + self.s)
      x2 = x0 + (i+1)*(self.w + self.w)
      
      if i % 2 == 0:
        pts.append(pya.Point.new(x1/dbu, self.h/dbu))
        pts.append(pya.Point.new(x2/dbu, self.h/dbu))
      else:
        pts.append(pya.Point.new(x1/dbu, -self.h/dbu))
        pts.append(pya.Point.new(x2/dbu, -self.h/dbu))
    
    x0r = self.n/2*(self.s + self.w)
    pts.append(pya.Point.new(x0r/dbu, 0))
    
    xr = self.dx/2
    pts.append(pya.Point.new(xr/dbu ,0))
    
    inductor = pya.Path(pts, self.w/dbu)
    self.cell.shapes(self.lyr_layer).insert(inductor)
    
class PathToInductor(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(PathToInductor, self).__init__()
  
    self.param("lyr", self.TypeLayer, "Metal Layer", default=pya.LayerInfo(6,0))
    self.param("Ll", self.TypeDouble, "Inductance/length at 1um width (pH/um)", default=0.37)
    self.param("ixterm", self.TypeBoolean, "Include Terminals", default=False)    
    self.param("l", self.TypeDouble, "Inductor Length (um)", readonly=True)
    

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "L={:.3f}pH".format(self.L)
    
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we can use any shape which 
    # has a finite bounding box
    return self.shape.is_path()
  
  def parameters_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we set r and l from the shape's 
    # bounding box width and layer
    # self.tmp = self.shape.bbox().width() * self.layout.dbu / 2
    self.l = self.layout.get_info(self.layer)
    self.s = self.shape.path # read selected path obj.
                      
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we use the center of the shape's
    # bounding box to determine the transformation
    return pya.Trans()
    
class MeanderInductors(pya.Library):

  def __init__(self):
  
    # TODO: change the description
    self.description = "Meander Inductor library"
    
    # register the PCell declarations
    # TODO: change the names
    self.layout().register_pcell("MeanderInductor", MeanderInductor())
    # TODO: register more PCell declarations
    
    # register our library with the name "PCellLib"
    # TODO: change the library name
    self.register("MeanderInductors")
    
# instantiate and register the library
# TODO: change the library name
MeanderInductors()

</text>
</klayout-macro>
